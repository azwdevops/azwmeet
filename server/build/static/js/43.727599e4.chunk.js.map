{"version":3,"file":"static/js/43.727599e4.chunk.js","mappings":"sOAsBA,MA2GA,GAAeA,EAAAA,EAAAA,KAjBUC,IAAW,IAAD,IACjC,MAAO,CACLC,QAAO,UAAED,EAAME,cAAR,aAAE,EAAcD,QACvBE,yBAAwB,UAAEH,EAAMI,YAAR,aAAE,EAAYD,6BAIdE,IACnB,CACLC,aAAc,IAAMD,EAAS,CAAEE,KAAMC,EAAAA,KACrCC,eAAgB,CAACC,EAAcC,EAAgBC,IAC7CP,GAASQ,EAAAA,EAAAA,IAAaH,EAAcC,EAAgBC,IACtDE,gBAAiB,IAAMT,EAAS,CAAEE,KAAMQ,EAAAA,KACxCC,iBAAkB,IAAMX,EAAS,CAAEE,KAAMU,EAAAA,QAI7C,EA3G8BC,IAC5B,MAAMC,GAAWC,EAAAA,EAAAA,OACX,eAAET,IAAmBU,EAAAA,EAAAA,OACrB,QAAEpB,EAAF,yBAAWE,GAA6Be,GACxC,aAAEZ,EAAF,eAAgBG,EAAhB,gBAAgCK,EAAhC,iBAAiDE,GACrDE,GACKR,EAAcY,IAAmBC,EAAAA,EAAAA,UAAS,CAC/CC,aAAc,GACdC,iBAAkB,MAKd,aAAED,EAAF,iBAAgBC,GAAqBf,EAcrCgB,EAAgBC,GACpBL,EAAgB,IAAKZ,EAAc,CAACiB,EAAEC,OAAOC,MAAOF,EAAEC,OAAOE,QAc/D,OACE,iCACE,iBAAKC,UAAU,oBAAf,WACE,kEACA,mBAAQxB,KAAK,SAASyB,QAASlB,EAA/B,kCAIF,SAAC,IAAD,CAAWmB,OAAQ9B,EAAnB,UACE,kBAAM4B,UAAU,SAASG,GAAIjC,EAAU,iBAAmB,GAA1D,WACE,gDACA,iBAAK8B,UAAU,wBAAf,WACE,kBAAOI,QAAQ,GAAf,2BACA,kBACE5B,KAAK,WACLsB,KAAK,eACLO,SAAUV,EACVI,MAAON,OAGVvB,IACC,SAAC,IAAD,CACEoC,MAAO,CAAEC,SAAU,WAAYC,WAAY,UAG/C,iBAAKR,UAAU,wBAAf,WACE,kBAAOI,QAAQ,GAAf,mCACA,kBACE5B,KAAK,WACLsB,KAAK,mBACLO,SAAUV,EACVI,MAAOL,QAGX,iBAAKM,UAAU,gBAAf,WACE,mBAAQxB,KAAK,SAASyB,QAxDH,MAH3BQ,EAAAA,EAAAA,IAAgB9B,GAKhBM,KAsDQ,oBAGA,mBAAQT,KAAK,SAASyB,QAjDFL,IAE5B,GADAA,EAAEc,kBACEC,EAAAA,EAAAA,IAAQhC,GACV,OAAOiC,OAAOC,MAAM,4BAEtBtC,IAGAG,EAAeC,EAAcC,EAAgBQ,IAyCrC,mC,0CCrGL,MAAMuB,EAAWG,IACtB,IAAK,MAAMC,KAAKD,EACd,GAAuB,KAAnB,UAAGA,EAAOC,IACZ,OAAO,EAGX,OAAO,GAIIN,EAAmBK,IAC9B,IAAK,MAAMC,KAAKD,EACdA,EAAOC,GAAK,K","sources":["pages/ResetPasswordConfirm.js","shared/sharedFunctions.js"],"sourcesContent":["// import installed packages\nimport { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useParams, useNavigate } from \"react-router-dom\";\n// import styles\nimport \"./ActivateAccount/ActivateAccount.scss\";\n// import material ui items\nimport CircularProgress from \"@mui/material/CircularProgress\";\n// import shared/global items\nimport { ifEmpty, resetFormValues } from \"../shared/sharedFunctions\";\n\n// import components/pages\nimport MinDialog from \"../components/common/MinDialog\";\n\n// import redux API\nimport {\n  CLOSE_PASSWORD_RESET_CONFIRM,\n  OPEN_PASSWORD_RESET_CONFIRM,\n  START_LOADING,\n} from \"../redux/actions/types\";\nimport { set_password } from \"../redux/actions/auth\";\n\nconst ResetPasswordConfirm = (props) => {\n  const navigate = useNavigate();\n  const { password_token } = useParams();\n  const { loading, resetPasswordConfirmForm } = props; // extract state from props\n  const { startLoading, setNewPassword, openNewPassword, closeNewPassword } =\n    props; // extract dispatch actions from props\n  const [newPasswords, setNewPasswords] = useState({\n    new_password: \"\",\n    confirm_password: \"\",\n  });\n\n  // destructure values for better code formatting\n  // ########### start of destructuring #################  //\n  const { new_password, confirm_password } = newPasswords;\n\n  // ########### end of destructuring #################  //\n\n  const resetForm = () => {\n    resetFormValues(newPasswords);\n  };\n\n  const closeNewPasswordForm = () => {\n    resetForm();\n    closeNewPassword();\n  };\n\n  // handle change\n  const handleChange = (e) =>\n    setNewPasswords({ ...newPasswords, [e.target.name]: e.target.value });\n\n  // function to submit new password\n  const handleSetNewPassword = (e) => {\n    e.preventDefault();\n    if (ifEmpty(newPasswords)) {\n      return window.alert(\"Both fields are required\");\n    }\n    startLoading();\n\n    // call the signup action creator\n    setNewPassword(newPasswords, password_token, navigate);\n  };\n\n  return (\n    <>\n      <div className=\"activate__account\">\n        <h1>Click the button to set new password</h1>\n        <button type=\"button\" onClick={openNewPassword}>\n          Set New password\n        </button>\n      </div>\n      <MinDialog isOpen={resetPasswordConfirmForm}>\n        <form className=\"dialog\" id={loading ? \"formSubmitting\" : \"\"}>\n          <h3>Enter new password</h3>\n          <div className=\"dialog__rowSingleItem\">\n            <label htmlFor=\"\">New Password</label>\n            <input\n              type=\"password\"\n              name=\"new_password\"\n              onChange={handleChange}\n              value={new_password}\n            />\n          </div>\n          {loading && (\n            <CircularProgress\n              style={{ position: \"absolute\", marginLeft: \"43%\" }}\n            />\n          )}\n          <div className=\"dialog__rowSingleItem\">\n            <label htmlFor=\"\">Confirm New Password</label>\n            <input\n              type=\"password\"\n              name=\"confirm_password\"\n              onChange={handleChange}\n              value={confirm_password}\n            />\n          </div>\n          <div className=\"form__Buttons\">\n            <button type=\"button\" onClick={closeNewPasswordForm}>\n              Close\n            </button>\n            <button type=\"submit\" onClick={handleSetNewPassword}>\n              Submit\n            </button>\n          </div>\n        </form>\n      </MinDialog>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    loading: state.shared?.loading,\n    resetPasswordConfirmForm: state.auth?.resetPasswordConfirmForm,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    startLoading: () => dispatch({ type: START_LOADING }),\n    setNewPassword: (newPasswords, password_token, history) =>\n      dispatch(set_password(newPasswords, password_token, history)),\n    openNewPassword: () => dispatch({ type: OPEN_PASSWORD_RESET_CONFIRM }),\n    closeNewPassword: () => dispatch({ type: CLOSE_PASSWORD_RESET_CONFIRM }),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ResetPasswordConfirm);\n","// check if any field in an object is empty\nexport const ifEmpty = (object) => {\n  for (const i in object) {\n    if (`${object[i]}` === \"\") {\n      return true;\n    }\n  }\n  return false;\n};\n\n// function to reset form values to blank\nexport const resetFormValues = (object) => {\n  for (const i in object) {\n    object[i] = \"\";\n  }\n};\n\n// function to get max date to display on user entry form\nexport const maxDate = () => {\n  const today = new Date();\n  const day = today.getDate() < 10 ? \"0\" + today.getDate() : today.getDate();\n  const month =\n    today.getMonth() + 1 < 10\n      ? \"0\" + (today.getMonth() + 1)\n      : today.getMonth() + 1;\n  const max_date = today.getFullYear() + \"-\" + month + \"-\" + day;\n  return max_date;\n};\n\n// function to get min date to display on exam date\nexport const minDate = () => {\n  const today = new Date();\n  const day = today.getDate() < 10 ? \"0\" + today.getDate() : today.getDate();\n  const month =\n    today.getMonth() + 1 < 10\n      ? \"0\" + (today.getMonth() + 1)\n      : today.getMonth() + 1;\n  const min_date = today.getFullYear() + \"-\" + month + \"-\" + day;\n  return min_date;\n};\n"],"names":["connect","state","loading","shared","resetPasswordConfirmForm","auth","dispatch","startLoading","type","START_LOADING","setNewPassword","newPasswords","password_token","history","set_password","openNewPassword","OPEN_PASSWORD_RESET_CONFIRM","closeNewPassword","CLOSE_PASSWORD_RESET_CONFIRM","props","navigate","useNavigate","useParams","setNewPasswords","useState","new_password","confirm_password","handleChange","e","target","name","value","className","onClick","isOpen","id","htmlFor","onChange","style","position","marginLeft","resetFormValues","preventDefault","ifEmpty","window","alert","object","i"],"sourceRoot":""}