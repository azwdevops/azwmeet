{"version":3,"file":"static/js/647.683b48b1.chunk.js","mappings":"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","sources":["components/users/ChangePassword.js","pages/Profile/Profile.js","shared/sharedFunctions.js"],"sourcesContent":["// import installed packages\nimport { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\n// import styles\n\n// import material ui items\nimport CircularProgress from \"@mui/material/CircularProgress\";\n// import shared/global items\nimport { ifEmpty, resetFormValues } from \"../../shared/sharedFunctions\";\n// import components/pages\nimport MinDialog from \"../common/MinDialog\";\n\n// import redux API\nimport {\n  CLOSE_CHANGE_PASSWORD,\n  START_LOADING,\n} from \"../../redux/actions/types\";\nimport { change_password } from \"../../redux/actions/auth\";\n\nconst ChangePassword = (props) => {\n  const navigate = useNavigate();\n  const { loading, changePasswordForm, userId } = props; // extract state from props\n  const { startLoading, changeUserPassword, closeChangePassword } = props; // extract dispatch actions from props\n\n  // internal state\n  const [passwords, setPasswords] = useState({\n    current_password: \"\",\n    new_password: \"\",\n    confirm_new_password: \"\",\n  });\n\n  //############### destructuring code ###################//\n  const { current_password, new_password, confirm_new_password } = passwords;\n  //#################end of destructuring ###########//\n\n  const resetForm = () => {\n    resetFormValues(passwords);\n  };\n\n  const closeChangePasswordForm = () => {\n    resetForm();\n    closeChangePassword();\n  };\n\n  // handle change function\n  const handleChange = (e) => {\n    setPasswords({ ...passwords, [e.target.name]: e.target.value });\n  };\n\n  // function to handle password change\n  const handlePasswordChange = (e) => {\n    e.preventDefault();\n    if (ifEmpty(passwords)) {\n      return window.alert(\"All fields are required\");\n    }\n    startLoading();\n    // call the signup action creator\n    changeUserPassword(passwords, userId, navigate, resetForm);\n  };\n  return (\n    <MinDialog isOpen={changePasswordForm}>\n      <form className=\"dialog\" id={loading ? \"formSubmitting\" : \"\"}>\n        <h3>Change your password here</h3>\n        <div className=\"dialog__rowSingleItem\">\n          <label htmlFor=\"\">Old Password</label>\n          <input\n            type=\"password\"\n            name=\"current_password\"\n            value={current_password}\n            onChange={handleChange}\n          />\n        </div>\n        {loading && (\n          <CircularProgress\n            style={{ position: \"absolute\", marginLeft: \"40%\" }}\n          />\n        )}\n        <div className=\"dialog__rowSingleItem\">\n          <label htmlFor=\"\">New Password</label>\n          <input\n            type=\"password\"\n            name=\"new_password\"\n            value={new_password}\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"dialog__rowSingleItem\">\n          <label htmlFor=\"\">Confirm New Password</label>\n          <input\n            type=\"password\"\n            name=\"confirm_new_password\"\n            value={confirm_new_password}\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"form__Buttons\">\n          <button type=\"button\" onClick={closeChangePasswordForm}>\n            Close\n          </button>\n          <button type=\"submit\" onClick={handlePasswordChange}>\n            Submit\n          </button>\n        </div>\n      </form>\n    </MinDialog>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    loading: state.shared?.loading,\n    changePasswordForm: state.auth?.changePasswordForm,\n    userId: state.auth.user?.id,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    startLoading: () => dispatch({ type: START_LOADING }),\n    changeUserPassword: (passwords, userId, history, resetForm) =>\n      dispatch(change_password(passwords, userId, history, resetForm)),\n    closeChangePassword: () => dispatch({ type: CLOSE_CHANGE_PASSWORD }),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChangePassword);\n","// import installed packages\nimport { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\n\n// import styles\nimport \"./Profile.scss\";\n// import material ui items\nimport CircularProgress from \"@mui/material/CircularProgress\";\n// import shared/global items\nimport { ifEmpty } from \"../../shared/sharedFunctions\";\n// import components/pages\nimport ChangePassword from \"../../components/users/ChangePassword\";\n// import redux API\nimport { OPEN_CHANGE_PASSWORD, START_LOADING } from \"../../redux/actions/types\";\nimport { update_user } from \"../../redux/actions/auth\";\n\nconst Profile = (props) => {\n  const { first_name, last_name, username, email, bio, userId, loading } =\n    props; // extract state from props\n  const { startLoading, updateUser, openChangePassword } = props; // extract dispatch actions from props\n  // internal state\n  const [updatedUser, setUpdatedUser] = useState({});\n\n  useEffect(() => {\n    setUpdatedUser({\n      first_name,\n      last_name,\n      username,\n      email,\n      bio,\n    });\n  }, [first_name, last_name, email, username, bio]);\n\n  // function to update user details\n  const updateUserDetails = (e) => {\n    e.preventDefault();\n    if (ifEmpty(updatedUser)) {\n      return window.alert(\"Fill all fields to update your profile\");\n    }\n    startLoading();\n    // call the signup action creator\n    updateUser(updatedUser, userId);\n  };\n\n  // handle change function\n  const handleChange = (e) => {\n    setUpdatedUser({ ...updatedUser, [e.target.name]: e.target.value });\n  };\n\n  return (\n    <div className=\"profile\" id={loading ? \"formSubmitting\" : \"\"}>\n      <h2>Profile Details</h2>\n      <div className=\"profile__row\">\n        <span>\n          <label htmlFor=\"\">First Name</label>\n          <input\n            type=\"text\"\n            name=\"first_name\"\n            value={updatedUser.first_name}\n            onChange={handleChange}\n          />\n        </span>\n        <span>\n          <label htmlFor=\"\">Last Name</label>\n          <input\n            type=\"text\"\n            name=\"last_name\"\n            value={updatedUser.last_name}\n            onChange={handleChange}\n          />\n        </span>\n      </div>\n      {loading && (\n        <CircularProgress style={{ position: \"absolute\", marginLeft: \"30%\" }} />\n      )}\n      <div className=\"profile__row\">\n        <span>\n          <label htmlFor=\"\">Username</label>\n          <input\n            type=\"text\"\n            name=\"username\"\n            value={updatedUser.username}\n            onChange={handleChange}\n          />\n        </span>\n        <span>\n          <label htmlFor=\"\">Email</label>\n          <input\n            type=\"email\"\n            name=\"email\"\n            value={updatedUser.email}\n            onChange={handleChange}\n          />\n        </span>\n      </div>\n\n      <div className=\"profile__rowSingleItem\">\n        <label htmlFor=\"\">Bio</label>\n        <textarea name=\"bio\" value={updatedUser.bio} onChange={handleChange} />\n      </div>\n      <div className=\"profile__Buttons\">\n        <button\n          type=\"button\"\n          className=\"change__password\"\n          onClick={openChangePassword}\n        >\n          Change Password\n        </button>\n        <button type=\"submit\" className=\"update\" onClick={updateUserDetails}>\n          Update Profile\n        </button>\n      </div>\n\n      {/* linked components */}\n      <ChangePassword />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    first_name: state.auth.user?.first_name,\n    last_name: state.auth.user?.last_name,\n    username: state.auth.user?.username,\n    email: state.auth.user?.email,\n    bio: state.auth.user?.bio,\n    userId: state.auth.user?.id,\n    loading: state.shared?.loading,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    startLoading: () => dispatch({ type: START_LOADING }),\n    updateUser: (updatedUser, userId) =>\n      dispatch(update_user(updatedUser, userId)),\n    openChangePassword: () => dispatch({ type: OPEN_CHANGE_PASSWORD }),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile);\n","// check if any field in an object is empty\nexport const ifEmpty = (object) => {\n  for (const i in object) {\n    if (`${object[i]}` === \"\") {\n      return true;\n    }\n  }\n  return false;\n};\n\n// function to reset form values to blank\nexport const resetFormValues = (object) => {\n  for (const i in object) {\n    object[i] = \"\";\n  }\n};\n\n// function to get max date to display on user entry form\nexport const maxDate = () => {\n  const today = new Date();\n  const day = today.getDate() < 10 ? \"0\" + today.getDate() : today.getDate();\n  const month =\n    today.getMonth() + 1 < 10\n      ? \"0\" + (today.getMonth() + 1)\n      : today.getMonth() + 1;\n  const max_date = today.getFullYear() + \"-\" + month + \"-\" + day;\n  return max_date;\n};\n\n// function to get min date to display on exam date\nexport const minDate = () => {\n  const today = new Date();\n  const day = today.getDate() < 10 ? \"0\" + today.getDate() : today.getDate();\n  const month =\n    today.getMonth() + 1 < 10\n      ? \"0\" + (today.getMonth() + 1)\n      : today.getMonth() + 1;\n  const min_date = today.getFullYear() + \"-\" + month + \"-\" + day;\n  return min_date;\n};\n"],"names":["connect","state","loading","shared","changePasswordForm","auth","userId","user","id","dispatch","startLoading","type","START_LOADING","changeUserPassword","passwords","history","resetForm","change_password","closeChangePassword","CLOSE_CHANGE_PASSWORD","props","navigate","useNavigate","setPasswords","useState","current_password","new_password","confirm_new_password","resetFormValues","handleChange","e","target","name","value","MinDialog","isOpen","className","htmlFor","onChange","CircularProgress","style","position","marginLeft","onClick","preventDefault","ifEmpty","window","alert","first_name","last_name","username","email","bio","updateUser","updatedUser","update_user","openChangePassword","OPEN_CHANGE_PASSWORD","setUpdatedUser","useEffect","object","i"],"sourceRoot":""}