{"version":3,"file":"static/js/481.2d16fc32.chunk.js","mappings":"mNAuBA,MAkJA,GAAeA,EAAAA,EAAAA,KAjBUC,IAAW,IAAD,EACjC,MAAO,CACLC,QAAO,UAAED,EAAME,cAAR,aAAE,EAAcD,QACvBE,UAAWH,EAAMI,KAAKD,cAGEE,IACnB,CACLC,aAAc,IAAMD,EAAS,CAAEE,KAAMC,EAAAA,KACrCC,UAAW,CAACC,EAAWC,IAAcN,GAASO,EAAAA,EAAAA,IAAMF,EAAWC,IAC/DE,WAAY,IAAMR,EAAS,CAAEE,KAAMO,EAAAA,KACnCC,kBAAmB,IAAMV,EAAS,CAAEE,KAAMS,EAAAA,KAC1CC,WAAY,IAAMZ,EAAS,CAAEE,KAAMW,EAAAA,KACnCC,qBAAsB,IAAMd,EAAS,CAAEE,KAAMa,EAAAA,QAIjD,EAlJeC,IACb,MAAM,QAAEpB,EAAF,UAAWE,GAAckB,GACzB,aACJf,EADI,UAEJG,EAFI,WAGJI,EAHI,kBAIJE,EAJI,WAKJE,EALI,qBAMJE,GACEE,GACGX,EAAWY,IAAgBC,EAAAA,EAAAA,UAAS,CACzCC,MAAO,GACPC,SAAU,MAIN,MAAED,EAAF,SAASC,GAAaf,EAGtBC,EAAY,MAChBe,EAAAA,EAAAA,IAAgBhB,IAmBZiB,EAAgBC,IACpBN,EAAa,IAAKZ,EAAW,CAACkB,EAAEC,OAAOC,MAAOF,EAAEC,OAAOE,SAoBzD,OACE,+BACE,SAAC,IAAD,CAAWC,OAAQ7B,EAAnB,UACE,kBAAM8B,UAAU,SAASC,GAAIjC,EAAU,iBAAmB,GAA1D,WACE,wCACA,iBAAKgC,UAAU,wBAAf,WACE,kBAAOE,QAAQ,GAAf,oBACA,kBACE5B,KAAK,QACLuB,KAAK,QACLM,SAAUT,EACVI,MAAOP,OAGVvB,IACC,SAAC,IAAD,CACEoC,MAAO,CAAEC,SAAU,WAAYC,WAAY,UAG/C,iBAAKN,UAAU,wBAAf,WACE,kBAAOE,QAAQ,GAAf,uBACA,kBACE5B,KAAK,WACLuB,KAAK,WACLM,SAAUT,EACVI,MAAON,QAGX,iBAAKQ,UAAU,gBAAf,WACE,mBAAQ1B,KAAK,SAASiC,QAjET,KACrB3B,IACAF,KA+DQ,oBAGA,mBAAQJ,KAAK,SAASiC,QA/DXZ,IAEnB,GADAA,EAAEa,kBACEC,EAAAA,EAAAA,IAAQhC,GACV,OAAOiC,OAAOC,MAAM,+BAEtBtC,IAEAG,EAAUC,EAAWC,IAwDb,uBAIF,iBAAKsB,UAAU,qBAAf,WACE,kBACEE,QAAQ,GACRF,UAAU,SACVO,QAxDkB,KAC5BzB,IACAF,KAmDQ,8BAOA,kBACEsB,QAAQ,GACRF,UAAU,SACVI,MAAO,CAAEQ,YAAa,OACtBL,QA1DW,KACrBvB,IACAJ,KAoDQ,gCASF,gBAAKoB,UAAU,qBAAf,UACE,kBACEE,QAAQ,GACRF,UAAU,SACVO,QA9DqB,KAC/BrB,IACAN,KAyDQ,4C,0CCxIL,MAAM6B,EAAWI,IACtB,IAAK,MAAMC,KAAKD,EACd,GAAuB,KAAnB,UAAGA,EAAOC,IACZ,OAAO,EAGX,OAAO,GAIIrB,EAAmBoB,IAC9B,IAAK,MAAMC,KAAKD,EACdA,EAAOC,GAAK","sources":["components/users/Login.js","shared/sharedFunctions.js"],"sourcesContent":["// import installed packages\nimport { useState } from \"react\";\nimport { connect } from \"react-redux\";\n\n// import styles\n\n// import material ui items\nimport CircularProgress from \"@mui/material/CircularProgress\";\n// import shared/global items\nimport { ifEmpty, resetFormValues } from \"../../shared/sharedFunctions\";\n// import components/pages\nimport MinDialog from \"../common/MinDialog\";\n\n// import redux API\nimport {\n  CLOSE_LOGIN,\n  OPEN_FORGOT_PASSWORD,\n  OPEN_RESEND_ACTIVATION,\n  OPEN_SIGNUP,\n  START_LOADING,\n} from \"../../redux/actions/types\";\nimport { login } from \"../../redux/actions/auth\";\n\nconst Login = (props) => {\n  const { loading, loginForm } = props; // extract state from props\n  const {\n    startLoading,\n    loginUser,\n    closeLogin,\n    openPasswordReset,\n    openSignup,\n    openResendActivation,\n  } = props; // extract dispatch action from props\n  const [loginData, setLoginData] = useState({\n    email: \"\",\n    password: \"\",\n  });\n\n  // destructuring\n  const { email, password } = loginData;\n\n  // reset form values\n  const resetForm = () => {\n    resetFormValues(loginData);\n  };\n\n  // function to close login form\n  const closeLoginForm = () => {\n    closeLogin();\n    resetForm();\n  };\n\n  const handleLogin = (e) => {\n    e.preventDefault();\n    if (ifEmpty(loginData)) {\n      return window.alert(\"Email and password required\");\n    }\n    startLoading();\n    // call the signup action creator\n    loginUser(loginData, resetForm);\n  };\n\n  const handleChange = (e) => {\n    setLoginData({ ...loginData, [e.target.name]: e.target.value });\n  };\n\n  // open password reset form\n  const openPasswordResetForm = () => {\n    openPasswordReset();\n    closeLogin();\n  };\n\n  //open sign up form\n  const openSignupForm = () => {\n    openSignup();\n    closeLogin();\n  };\n  // open resend activation\n  const openResendActivationForm = () => {\n    openResendActivation();\n    closeLogin();\n  };\n\n  return (\n    <>\n      <MinDialog isOpen={loginForm}>\n        <form className=\"dialog\" id={loading ? \"formSubmitting\" : \"\"}>\n          <h3>Login here</h3>\n          <div className=\"dialog__rowSingleItem\">\n            <label htmlFor=\"\">Email</label>\n            <input\n              type=\"email\"\n              name=\"email\"\n              onChange={handleChange}\n              value={email}\n            />\n          </div>\n          {loading && (\n            <CircularProgress\n              style={{ position: \"absolute\", marginLeft: \"40%\" }}\n            />\n          )}\n          <div className=\"dialog__rowSingleItem\">\n            <label htmlFor=\"\">Password</label>\n            <input\n              type=\"password\"\n              name=\"password\"\n              onChange={handleChange}\n              value={password}\n            />\n          </div>\n          <div className=\"form__Buttons\">\n            <button type=\"button\" onClick={closeLoginForm}>\n              Close\n            </button>\n            <button type=\"submit\" onClick={handleLogin}>\n              Login\n            </button>\n          </div>\n          <div className=\"extra__formButtons\">\n            <label\n              htmlFor=\"\"\n              className=\"button\"\n              onClick={openPasswordResetForm}\n            >\n              Forgot Password\n            </label>\n            <label\n              htmlFor=\"\"\n              className=\"button\"\n              style={{ justifySelf: \"end\" }}\n              onClick={openSignupForm}\n            >\n              Create Account\n            </label>\n          </div>\n          <div className=\"extra__formButtons\">\n            <label\n              htmlFor=\"\"\n              className=\"button\"\n              onClick={openResendActivationForm}\n            >\n              Resend Activation\n            </label>\n          </div>\n        </form>\n      </MinDialog>\n      {/* components */}\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    loading: state.shared?.loading,\n    loginForm: state.auth.loginForm,\n  };\n};\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    startLoading: () => dispatch({ type: START_LOADING }),\n    loginUser: (loginData, resetForm) => dispatch(login(loginData, resetForm)),\n    closeLogin: () => dispatch({ type: CLOSE_LOGIN }),\n    openPasswordReset: () => dispatch({ type: OPEN_FORGOT_PASSWORD }),\n    openSignup: () => dispatch({ type: OPEN_SIGNUP }),\n    openResendActivation: () => dispatch({ type: OPEN_RESEND_ACTIVATION }),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","// check if any field in an object is empty\nexport const ifEmpty = (object) => {\n  for (const i in object) {\n    if (`${object[i]}` === \"\") {\n      return true;\n    }\n  }\n  return false;\n};\n\n// function to reset form values to blank\nexport const resetFormValues = (object) => {\n  for (const i in object) {\n    object[i] = \"\";\n  }\n};\n\n// function to get max date to display on user entry form\nexport const maxDate = () => {\n  const today = new Date();\n  const day = today.getDate() < 10 ? \"0\" + today.getDate() : today.getDate();\n  const month =\n    today.getMonth() + 1 < 10\n      ? \"0\" + (today.getMonth() + 1)\n      : today.getMonth() + 1;\n  const max_date = today.getFullYear() + \"-\" + month + \"-\" + day;\n  return max_date;\n};\n\n// function to get min date to display on exam date\nexport const minDate = () => {\n  const today = new Date();\n  const day = today.getDate() < 10 ? \"0\" + today.getDate() : today.getDate();\n  const month =\n    today.getMonth() + 1 < 10\n      ? \"0\" + (today.getMonth() + 1)\n      : today.getMonth() + 1;\n  const min_date = today.getFullYear() + \"-\" + month + \"-\" + day;\n  return min_date;\n};\n"],"names":["connect","state","loading","shared","loginForm","auth","dispatch","startLoading","type","START_LOADING","loginUser","loginData","resetForm","login","closeLogin","CLOSE_LOGIN","openPasswordReset","OPEN_FORGOT_PASSWORD","openSignup","OPEN_SIGNUP","openResendActivation","OPEN_RESEND_ACTIVATION","props","setLoginData","useState","email","password","resetFormValues","handleChange","e","target","name","value","isOpen","className","id","htmlFor","onChange","style","position","marginLeft","onClick","preventDefault","ifEmpty","window","alert","justifySelf","object","i"],"sourceRoot":""}